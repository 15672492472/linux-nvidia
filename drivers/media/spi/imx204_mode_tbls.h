/*
 * imx204.c - imx204 sensor driver
 *
 * Copyright (c) 2017, NVIDIA CORPORATION, All Rights Reserved.
 *
 * This program is free software; you can redistribute it and/or modify it
 * under the terms and conditions of the GNU General Public License,
 * version 2, as published by the Free Software Foundation.
 *
 * This program is distributed in the hope it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY or
 * FITNESS FOR A PARTICULAR PURPOSE.  See the GNU General Public License for
 * more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program.  If not, see <http://www.gnu.org/licenses/>.
 */

#include <media/camera_common.h>

#ifndef __IMX204_I2C_TABLES__
#define __IMX204_I2C_TABLES__

#define IMX204_TABLE_WAIT_MS	0xFFFF
#define IMX204_TABLE_END		0xFFFA
#define IMX204_TABLE_ENABLE_GTX 0xFFFB
#define IMX204_MAX_RETRIES	3
#define IMX204_WAIT_MS		2

struct reg_24_8 {
	u32 addr;
	u8 val;
};
#define imx204_reg struct reg_24_8

static imx204_reg mode_table_common[] = {
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg imx204_start[] = {
	/* Standby cancel sequency */
	{0x810000, 0x02},
	{0x8102EB, 0x03},
	{IMX204_TABLE_WAIT_MS, 11},
	{0x8102EB, 0x00},
	{IMX204_TABLE_WAIT_MS, 1},
	{0x810000, 00},
	{IMX204_TABLE_WAIT_MS, 10},
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg imx204_stop[] = {
	{0x810000, 0x01},
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg tp_colorbars[] = {
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg mode_1784x1318_FPGA[] = {
	{0x820000, 0x02},
	{0x8102eb, 0x03},
	{0x810063, 0x18},
	{0x810073, 0x1F},
	{0x81021A, 0xFF},
	{0x81021B, 0x01},
	{0x8102D2, 0x00},
	{0x810322, 0x0F},
	{0x810323, 0x00},
	{0x810396, 0x01},
	{0x8103C6, 0x00},
	{0x8103E7, 0x00},
	{0x810414, 0x2C},
	{0x810415, 0x00},
	{0x810416, 0x45},
	{0x810417, 0x00},
	{0x81041C, 0x28},
	{0x81041D, 0x00},
	{0x81041E, 0x30},
	{0x81041F, 0x00},
	{0x810430, 0x41},
	{0x810431, 0x00},
	{0x810432, 0x45},
	{0x810433, 0x00},
	{0x81043C, 0x41},
	{0x81043D, 0x00},
	{0x81043E, 0x44},
	{0x81043F, 0x00},
	{0x810479, 0x5B},
	{0x81047A, 0x00},
	{0x81047B, 0x59},
	{0x81047C, 0x00},
	{0x81047D, 0x53},
	{0x81047E, 0x00},
	{0x81048D, 0x04},
	{0x810490, 0x35},
	{0x810491, 0x00},
	{0x810492, 0x40},
	{0x810493, 0x00},
	{0x810494, 0x35},
	{0x810495, 0x00},
	{0x810496, 0x40},
	{0x810497, 0x00},
	{0x8104A0, 0x44},
	{0x8104A1, 0x00},
	{0x8104A2, 0x41},
	{0x8104A3, 0x00},
	{0x8104A4, 0x33},
	{0x8104A5, 0x00},
	{0x8104A6, 0x33},
	{0x8104A7, 0x00},
	{0x8104B4, 0x48},
	{0x8104B5, 0x00},
	{0x8104D1, 0x44},
	{0x8104D2, 0x00},
	{0x8104D3, 0x42},
	{0x8104D4, 0x00},
	{0x8104D5, 0x48},
	{0x8104D6, 0x00},
	{0x8104E3, 0x44},
	{0x8104E4, 0x00},
	{0x8104E5, 0x41},
	{0x8104E6, 0x00},
	{0x8104E7, 0x33},
	{0x8104E8, 0x00},
	{0x8104E9, 0x33},
	{0x8104EA, 0x00},
	{0x8104F1, 0x44},
	{0x8104F2, 0x00},
	{0x8104F3, 0x42},
	{0x8104F4, 0x00},
	{0x8104F5, 0x48},
	{0x8104F6, 0x00},
	{0x81052C, 0x0F},
	{0x81054F, 0x06},
	{0x810582, 0x04},
	{0x8107CA, 0x3A},
	{IMX204_TABLE_WAIT_MS, 10},

	{0x8102eb, 0x00},
	{IMX204_TABLE_WAIT_MS, 7},

	{0x810000, 0x00},
	{IMX204_TABLE_WAIT_MS, 14},

	//SyncGen.waitXvs(syncgen_idx)
	{0x810001, 0x18},
	{0x810013, 0x02},	// embedded data off, 0x3 to turn on
	{0x810009, 0x00},
	{0x81000a, 0x00},
	{0x810011, 0x00},

	{0x810012, 0x01},	// 1.152G, 0x0: 2.30G, 0x2: 576M

	//{0x810076, 0x0b},		// TPG
	//{0x810075, 0x11},

	{IMX204_TABLE_ENABLE_GTX, 0},

	{0x810003, 0x30},	// 2 lane, 0x40: 1 lane, 0x20: 4 lane, 0x10: 6 lane, 0x0: 8 lane

	{0x810004, 0x1a},
	{0x810005, 0x1c},
	{0x810006, 0x10},
	{0x810007, 0x00},
	{0x810008, 0x00},
	{0x81000d, 0x0f},
	{0x81000e, 0x00},
	{0x81001a, 0x00},
	{0x81001c, 0x00},
	{0x810036, 0x00},
	{0x810062, 0x0a},
	{0x81007e, 0x00},
	{0x81007f, 0x00},
	{0x810103, 0x00},
	{0x810115, 0x01},
	{0x81059d, 0x00},
	{0x8106f8, 0x00},
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg mode_5208x3924[] = {
	{0x810001, 0x10},
	{0x810002, 0x00},
	{0x810003, 0x10}, // 0x10 : SLVS-ES 6lane
	{0x810004, 0x00},
	{0x810005, 0x01},
	{0x810006, 0x00},
	{0x810007, 0x50},
	{0x810008, 0x00},
	{0x810009, 0xF0},
	{0x81000A, 0x00},
	{0x81000B, 0x08},
	{0x81000C, 0x00},
	{0x81000D, 0x00},
	{0x81000E, 0x00},
	{0x81000F, 0x00},
	{0x810010, 0x00},
	{0x810011, 0x00},
	{0x810013, 0x01}, // 0x01 embedded data enable
	{0x81001A, 0x01}, // MDREV=0x01, reverse sensor readout, sensor is upside down.
	{0x81001C, 0x00},
	{0x810036, 0x00},
	{0x810045, 0x32},
	{0x810062, 0x0A},
	{0x810063, 0x18},
	{0x81006F, 0x0E}, // cropping parameter vwinpos msb: 484 / 2 = 0xf2, converted to negative value since 0x81001A is 1, 0xff0e (two's conplement)
	{0x810070, 0xFF}, // cropping parameter vwinpos lsb
	{0x810071, 0xE6}, // cropping parameter vwincut msb: (3960 [Veff] - (2978 [Crop_width] + 12 [start_lines])) / 2 + 1= 486 = 0x1e6
	{0x810072, 0x01}, // cropping parameter vwincut lsb
	{0x810073, 0x1F},
	{0x810075, 0x00}, // 0x00 for video, 0x11 for test-pattern.
	{0x810076, 0x0A}, // for test-pattern.
	{0x81007E, 0x00},
	{0x81007F, 0x00},
	{0x8100D6, 0x0A},
	{0x8100D7, 0xFF},
	{0x8100D8, 0x7F},
	{0x8100D9, 0xFF},
	{0x8100DA, 0x10},
	{0x8100DB, 0x10},
	{0x8100DC, 0x10},
	{0x8100DE, 0x55},
	{0x8100DF, 0x01},
	{0x8100E0, 0x60},
	{0x8100E1, 0x00},
	{0x8100E2, 0x00},
	{0x8100E3, 0x00},
	{0x8100E4, 0x00},
	{0x8100E5, 0x00},
	{0x8100E6, 0x00},
	{0x8100E7, 0x00},
	{0x8100E8, 0x00},
	{0x8100E9, 0x00},
	{0x8100ED, 0x03},
	{0x8100EE, 0x00},
	{0x8100F9, 0x00},
	{0x8100FA, 0x00},
	{0x8100FB, 0x00},
	{0x8100FC, 0x00},
	{0x8100FD, 0x00},
	{0x810100, 0x08},
	{0x810101, 0x00},
	{0x810103, 0x00},
	{0x810104, 0x02},
	{0x810105, 0x18},
	{0x810106, 0x10},
	{0x810107, 0x00},
	{0x810109, 0x00},
	{0x81010A, 0x00},
	{0x81010B, 0x08},
	{0x81010C, 0x00},
	{0x81010D, 0x00},
	{0x81010E, 0x00},
	{0x81010F, 0x00},
	{0x810110, 0x00},
	{0x810111, 0x00},
	{0x810113, 0x88},
	{0x810115, 0x01},
	{0x810136, 0x00},
	{0x810145, 0x32},
	{0x8101D7, 0x00},
	{0x8101D8, 0x7F},
	{0x8101D9, 0xFF},
	{0x8101DA, 0x10},
	{0x8101DB, 0x10},
	{0x8101DC, 0x10},
	{0x8101F9, 0x00},
	{0x8101FA, 0x00},
	{0x8101FB, 0x00},
	{0x8101FC, 0x00},
	{0x8101FD, 0x00},
	{0x81021A, 0xFF},
	{0x81021B, 0x01},
	{0x8102D2, 0x00},
	{0x8102EB, 0x00},
	{0x810322, 0x0F},
	{0x810323, 0x00},
	{0x810396, 0x01},
	{0x8103C6, 0x00},
	{0x8103E7, 0x00},
	{0x810414, 0x2C},
	{0x810415, 0x00},
	{0x810416, 0x45},
	{0x810417, 0x00},
	{0x81041C, 0x28},
	{0x81041D, 0x00},
	{0x81041E, 0x30},
	{0x81041F, 0x00},
	{0x810430, 0x41},

	{0x810431, 0x00},
	{0x810432, 0x45},
	{0x810433, 0x00},
	{0x81043C, 0x41},
	{0x81043D, 0x00},
	{0x81043E, 0x44},
	{0x81043F, 0x00},
	{0x810479, 0x5b},
	{0x81047A, 0x00},
	{0x81047B, 0x59},
	{0x81047C, 0x00},
	{0x81047D, 0x53},
	{0x81047E, 0x00},
	{0x81048D, 0x04},
	{0x810490, 0x35},
	{0x810491, 0x00},
	{0x810492, 0x40},
	{0x810493, 0x00},
	{0x810494, 0x35},
	{0x810495, 0x00},
	{0x810496, 0x40},
	{0x810497, 0x00},
	{0x8104A0, 0x44},
	{0x8104A1, 0x00},
	{0x8104A2, 0x41},
	{0x8104A3, 0x00},
	{0x8104A4, 0x33},
	{0x8104A5, 0x00},
	{0x8104A6, 0x33},
	{0x8104A7, 0x00},
	{0x8104B4, 0x48},
	{0x8104B5, 0x00},
	{0x8104D1, 0x44},
	{0x8104D2, 0x00},
	{0x8104D3, 0x42},
	{0x8104D4, 0x00},
	{0x8104D5, 0x48},
	{0x8104D6, 0x00},

	{0x8104E3, 0x44},
	{0x8104E4, 0x00},
	{0x8104E5, 0x41},
	{0x8104E6, 0x00},
	{0x8104E7, 0x33},
	{0x8104E8, 0x00},
	{0x8104E9, 0x33},
	{0x8104EA, 0x00},
	{0x8104F1, 0x44},
	{0x8104F2, 0x00},
	{0x8104F3, 0x42},
	{0x8104F4, 0x00},
	{0x8104F5, 0x48},
	{0x8104F6, 0x00},
	{0x81052C, 0x0F},
	{0x81054F, 0x06},
	{0x810582, 0x04},
	{0x81059D, 0x00},
	// FIXME: check if thats correct. it stand 0x188 in sony'doc and 305 in
	// mode_01.def file
	{0x8106F7, 0x05},
	{0x8106F8, 0x06},
	{0x8107CA, 0x3A},
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg mode_5184x2916[] = {
	{0x810001, 0x10},
	{0x810002, 0x00},
	{0x810003, 0x10}, // 0x10 : SLVS-ES 6lane
	{0x810004, 0x00},
	{0x810005, 0x01},
	{0x810006, 0x00},
	{0x810007, 0x50},
	{0x810008, 0x00},
	{0x810009, 0xF0},
	{0x81000A, 0x00},
//	{0x81000B, 0x08},
	{0x81000B, 0x0F},
	{0x81000C, 0x00},
	{0x81000D, 0x00},
	{0x81000E, 0x00},
	{0x81000F, 0x00},
	{0x810010, 0x00},
	{0x810011, 0x00},
	{0x810013, 0x01}, // 0x01 embedded data enable
	{0x81001A, 0x01}, // MDREV=0x01, reverse sensor readout, sensor is upside down.
	{0x81001C, 0x00},
	{0x810036, 0x00},
	{0x810045, 0x32},
	{0x810062, 0x0A},
	{0x810063, 0x18},
	{0x81006F, 0x0E}, // cropping parameter vwinpos msb: 484 / 2 = 0xf2, converted to negative value since 0x81001A is 1, 0xff0e (two's conplement)
	{0x810070, 0xFF}, // cropping parameter vwinpos lsb
	{0x810071, 0xE6}, // cropping parameter vwincut msb: (3960 [Veff] - (2978 [Crop_width] + 12 [start_lines])) / 2 + 1= 486 = 0x1e6
	{0x810072, 0x01}, // cropping parameter vwincut lsb
	{0x810073, 0x1F},
	{0x810075, 0x00}, // 0x00 for video, 0x11 for test-pattern.
	{0x810076, 0x0A}, // for test-pattern.
	{0x81007E, 0x00},
	{0x81007F, 0x00},
	{0x8100D6, 0x0A},
	{0x8100D7, 0xFF},
	{0x8100D8, 0x7F},
	{0x8100D9, 0xFF},
	{0x8100DA, 0x10},
	{0x8100DB, 0x10},
	{0x8100DC, 0x10},
	{0x8100DE, 0x55},
	{0x8100DF, 0x01},
	{0x8100E0, 0x60},
	{0x8100E1, 0x00},
	{0x8100E2, 0x00},
	{0x8100E3, 0x00},
	{0x8100E4, 0x00},
	{0x8100E5, 0x00},
	{0x8100E6, 0x00},
	{0x8100E7, 0x00},
	{0x8100E8, 0x00},
	{0x8100E9, 0x00},
	{0x8100ED, 0x03},
	{0x8100EE, 0x00},
	{0x8100F9, 0x00},
	{0x8100FA, 0x00},
	{0x8100FB, 0x00},
	{0x8100FC, 0x00},
	{0x8100FD, 0x00},
	{0x810100, 0x08},
	{0x810101, 0x00},
	{0x810103, 0x00},
	{0x810104, 0x02},
	{0x810105, 0x18},
	{0x810106, 0x10},
	{0x810107, 0x00},
	{0x810109, 0x00},
	{0x81010A, 0x00},
	{0x81010B, 0x08},
	{0x81010C, 0x00},
	{0x81010D, 0x00},
	{0x81010E, 0x00},
	{0x81010F, 0x00},
	{0x810110, 0x00},
	{0x810111, 0x00},
	{0x810113, 0x88},
	{0x810115, 0x01},
	{0x810136, 0x00},
	{0x810145, 0x32},
	{0x8101D7, 0x00},
	{0x8101D8, 0x7F},
	{0x8101D9, 0xFF},
	{0x8101DA, 0x10},
	{0x8101DB, 0x10},
	{0x8101DC, 0x10},
	{0x8101F9, 0x00},
	{0x8101FA, 0x00},
	{0x8101FB, 0x00},
	{0x8101FC, 0x00},
	{0x8101FD, 0x00},
	{0x81021A, 0xFF},
	{0x81021B, 0x01},
	{0x8102D2, 0x00},
	{0x8102EB, 0x00},
	{0x810322, 0x0F},
	{0x810323, 0x00},
	{0x810396, 0x01},
	{0x8103C6, 0x00},
	{0x8103E7, 0x00},
	{0x810414, 0x2C},
	{0x810415, 0x00},
	{0x810416, 0x45},
	{0x810417, 0x00},
	{0x81041C, 0x28},
	{0x81041D, 0x00},
	{0x81041E, 0x30},
	{0x81041F, 0x00},
	{0x810430, 0x41},
	{0x810431, 0x00},
	{0x810432, 0x45},
	{0x810433, 0x00},
	{0x81043C, 0x41},
	{0x81043D, 0x00},
	{0x81043E, 0x44},
	{0x81043F, 0x00},
	{0x810479, 0x5b},
	{0x81047A, 0x00},
	{0x81047B, 0x59},
	{0x81047C, 0x00},
	{0x81047D, 0x53},
	{0x81047E, 0x00},
	{0x81048D, 0x04},
	{0x810490, 0x35},
	{0x810491, 0x00},
	{0x810492, 0x40},
	{0x810493, 0x00},
	{0x810494, 0x35},
	{0x810495, 0x00},
	{0x810496, 0x40},
	{0x810497, 0x00},
	{0x8104A0, 0x44},
	{0x8104A1, 0x00},
	{0x8104A2, 0x41},
	{0x8104A3, 0x00},
	{0x8104A4, 0x33},
	{0x8104A5, 0x00},
	{0x8104A6, 0x33},
	{0x8104A7, 0x00},
	{0x8104B4, 0x48},
	{0x8104B5, 0x00},
	{0x8104D1, 0x44},
	{0x8104D2, 0x00},
	{0x8104D3, 0x42},
	{0x8104D4, 0x00},
	{0x8104D5, 0x48},
	{0x8104D6, 0x00},
	{0x8104E3, 0x44},
	{0x8104E4, 0x00},
	{0x8104E5, 0x41},
	{0x8104E6, 0x00},
	{0x8104E7, 0x33},
	{0x8104E8, 0x00},
	{0x8104E9, 0x33},
	{0x8104EA, 0x00},
	{0x8104F1, 0x44},
	{0x8104F2, 0x00},
	{0x8104F3, 0x42},
	{0x8104F4, 0x00},
	{0x8104F5, 0x48},
	{0x8104F6, 0x00},
	{0x81052C, 0x0F},
	{0x81054F, 0x06},
	{0x810582, 0x04},
	{0x81059D, 0x00},
	// FIXME: check if thats correct. it stand 0x188 in sony'doc and 305 in
	// mode_01.def file
	{0x8106F7, 0x05},
	{0x8106F8, 0x06},
	{0x8107CA, 0x3A},
	{IMX204_TABLE_END, 0x00},
};

static const imx204_reg mode_3872x2178[] = {
	{0x810001, 0x10},
	{0x810002, 0x00},
	{0x810003, 0x10}, // 0x10 : SLVS-ES 6lane
	{0x810004, 0x00},
	{0x810005, 0x01},
	{0x810006, 0x00},
	{0x810007, 0x50},
	{0x810008, 0x00},
	{0x810009, 0xF0},
	{0x81000A, 0x00},
	{0x81000B, 0x08},
	{0x81000C, 0x00},
	{0x81000D, 0x00},
	{0x81000E, 0x00},
	{0x81000F, 0x00},
	{0x810010, 0x00},
	{0x810011, 0x00},
	{0x810013, 0x01}, // 0x01 embedded data enable
	{0x81001A, 0x01}, // MDREV=0x01, reverse sensor readout, sensor is upside down.
	{0x81001C, 0x00},
	{0x810036, 0x00},
	{0x810045, 0x32},
	{0x810062, 0x0A},
	{0x810063, 0x18},
	{0x81006F, 0x0E}, // cropping parameter vwinpos msb: 484 / 2 = 0xf2, converted to negative value since 0x81001A is 1, 0xff0e (two's conplement)
	{0x810070, 0xFF}, // cropping parameter vwinpos lsb
	{0x810071, 0xE6}, // cropping parameter vwincut msb: (3960 [Veff] - (2978 [Crop_width] + 12 [start_lines])) / 2 + 1= 486 = 0x1e6
	{0x810072, 0x01}, // cropping parameter vwincut lsb
	{0x810073, 0x1F},
	{0x810075, 0x00}, // 0x00 for video, 0x11 for test-pattern.
	{0x810076, 0x0A}, // for test-pattern.
	{0x81007E, 0x00},
	{0x81007F, 0x00},
	{0x8100D6, 0x0A},
	{0x8100D7, 0xFF},
	{0x8100D8, 0x7F},
	{0x8100D9, 0xFF},
	{0x8100DA, 0x10},
	{0x8100DB, 0x10},
	{0x8100DC, 0x10},
	{0x8100DE, 0x55},
	{0x8100DF, 0x01},
	{0x8100E0, 0x60},
	{0x8100E1, 0x00},
	{0x8100E2, 0x00},
	{0x8100E3, 0x00},
	{0x8100E4, 0x00},
	{0x8100E5, 0x00},
	{0x8100E6, 0x00},
	{0x8100E7, 0x00},
	{0x8100E8, 0x00},
	{0x8100E9, 0x00},
	{0x8100ED, 0x03},
	{0x8100EE, 0x00},
	{0x8100F9, 0x00},
	{0x8100FA, 0x00},
	{0x8100FB, 0x00},
	{0x8100FC, 0x00},
	{0x8100FD, 0x00},
	{0x810100, 0x08},
	{0x810101, 0x00},
	{0x810103, 0x00},
	{0x810104, 0x02},
	{0x810105, 0x18},
	{0x810106, 0x10},
	{0x810107, 0x00},
	{0x810109, 0x00},
	{0x81010A, 0x00},
	{0x81010B, 0x08},
	{0x81010C, 0x00},
	{0x81010D, 0x00},
	{0x81010E, 0x00},
	{0x81010F, 0x00},
	{0x810110, 0x00},
	{0x810111, 0x00},
	{0x810113, 0x88},
	{0x810115, 0x01},
	{0x810136, 0x00},
	{0x810145, 0x32},
	{0x8101D7, 0x00},
	{0x8101D8, 0x7F},
	{0x8101D9, 0xFF},
	{0x8101DA, 0x10},
	{0x8101DB, 0x10},
	{0x8101DC, 0x10},
	{0x8101F9, 0x00},
	{0x8101FA, 0x00},
	{0x8101FB, 0x00},
	{0x8101FC, 0x00},
	{0x8101FD, 0x00},
	{0x81021A, 0xFF},
	{0x81021B, 0x01},
	{0x8102D2, 0x00},
	{0x8102EB, 0x00},
	{0x810322, 0x0F},
	{0x810323, 0x00},
	{0x810396, 0x01},
	{0x8103C6, 0x00},
	{0x8103E7, 0x00},
	{0x810414, 0x2C},
	{0x810415, 0x00},
	{0x810416, 0x45},
	{0x810417, 0x00},
	{0x81041C, 0x28},
	{0x81041D, 0x00},
	{0x81041E, 0x30},
	{0x81041F, 0x00},
	{0x810430, 0x41},
	{0x810431, 0x00},
	{0x810432, 0x45},
	{0x810433, 0x00},
	{0x81043C, 0x41},
	{0x81043D, 0x00},
	{0x81043E, 0x44},
	{0x81043F, 0x00},
	{0x810479, 0x5b},
	{0x81047A, 0x00},
	{0x81047B, 0x59},
	{0x81047C, 0x00},
	{0x81047D, 0x53},
	{0x81047E, 0x00},
	{0x81048D, 0x04},
	{0x810490, 0x35},
	{0x810491, 0x00},
	{0x810492, 0x40},
	{0x810493, 0x00},
	{0x810494, 0x35},
	{0x810495, 0x00},
	{0x810496, 0x40},
	{0x810497, 0x00},
	{0x8104A0, 0x44},
	{0x8104A1, 0x00},
	{0x8104A2, 0x41},
	{0x8104A3, 0x00},
	{0x8104A4, 0x33},
	{0x8104A5, 0x00},
	{0x8104A6, 0x33},
	{0x8104A7, 0x00},
	{0x8104B4, 0x48},
	{0x8104B5, 0x00},
	{0x8104D1, 0x44},
	{0x8104D2, 0x00},
	{0x8104D3, 0x42},
	{0x8104D4, 0x00},
	{0x8104D5, 0x48},
	{0x8104D6, 0x00},
	{0x8104E3, 0x44},
	{0x8104E4, 0x00},
	{0x8104E5, 0x41},
	{0x8104E6, 0x00},
	{0x8104E7, 0x33},
	{0x8104E8, 0x00},
	{0x8104E9, 0x33},
	{0x8104EA, 0x00},
	{0x8104F1, 0x44},
	{0x8104F2, 0x00},
	{0x8104F3, 0x42},
	{0x8104F4, 0x00},
	{0x8104F5, 0x48},
	{0x8104F6, 0x00},
	{0x81052C, 0x0F},
	{0x81054F, 0x06},
	{0x810582, 0x04},
	{0x81059D, 0x00},
	// FIXME: check if thats correct. it stand 0x188 in sony'doc and 305 in
	// mode_01.def file
	{0x8106F7, 0x05},
	{0x8106F8, 0x06},
	{0x8107CA, 0x3A},
	{IMX204_TABLE_END, 0x00},
};

enum {
	IMX204_MODE_5208x3924,
	IMX204_MODE_1784x1318_FPGA = IMX204_MODE_5208x3924,
	IMX204_MODE_5184x2916,
	IMX204_MODE_3872x2178,
	IMX204_MODE_COMMON,
	IMX204_MODE_START_STREAM,
	IMX204_MODE_STOP_STREAM,
	IMX204_MODE_TEST_PATTERN,
};

static const imx204_reg *mode_table[] = {
	[IMX204_MODE_5208x3924] = mode_5208x3924,
	[IMX204_MODE_5184x2916] = mode_5184x2916,
	[IMX204_MODE_3872x2178] = mode_3872x2178,
	[IMX204_MODE_COMMON] = mode_table_common,
	[IMX204_MODE_START_STREAM] = imx204_start,
	[IMX204_MODE_STOP_STREAM] = imx204_stop,
	[IMX204_MODE_TEST_PATTERN] = tp_colorbars,
};

static const imx204_reg *mode_table_fpga[] = {
	[IMX204_MODE_1784x1318_FPGA] = mode_1784x1318_FPGA,
};

static const int imx204_30_fr[] = {
	30,
};

static const int imx204_60_fr[] = {
	60,
};

static const struct camera_common_frmfmt imx204_frmfmt[] = {
	{{5208, 3924}, imx204_30_fr, 1, 0, IMX204_MODE_5208x3924},
	{{5184, 2916}, imx204_30_fr, 1, 0, IMX204_MODE_5184x2916},
	{{3872, 2178}, imx204_60_fr, 1, 0, IMX204_MODE_3872x2178},
};

static const struct camera_common_frmfmt imx204_frmfmt_fpga[] = {
	{{1784, 1318}, imx204_30_fr, 1, 0, IMX204_MODE_1784x1318_FPGA},
};
#endif  /* __IMX204_I2C_TABLES__ */
