NVIDIA Tegra SCE aux CPU, with communication via the "IVC" IPC protocol.

SCE is an aux CPU which talks to CCPLEX over IVC.

The SCE FW implements IVC, and uses HSP IRQs as part of IVC.  The
SCE FW expects AST regions 0/1/2 are already set up for the SCE to
access FW in DRAM, SYSRAM if applicable, and the IVC memory.

== SCE top-level node ==

The SCE core is represented by the top-level node including direct HW resources
such as clocks, resets etc.

Required properties:
- compatible: Should be "nvidia,tegra186-sce-ivc" for T18x.
- reg: Address entries (SCE BASE, SCE CFG BASE, SCE_EVP, SCEPM)
  Formatted as per standard rules for this property.
- nvidia,ast: SCE AST0 and AST1 phandles
  For details refer: ../tegra-ast.txt
- clock-names: Names of the clocks required by SCE.
  Must include following entry:
  - sce-apb
- clocks: Should contain an entry for each entry in clock-names.
  See ../clock/clock-bindings.txt for details.
- reset-names: Names of the resets required for SCE.
  Must include following entries:
  - sce-apb
  - sce-nsysporeset
  - sce-nreset
  - sce-dbgresetn
  - sce-presetdbgn
  - sce-actmon
  - sce-pm
  - sce-dma
  - sce-hsp
  - tsctnsce
  - sce-tke
  - sce-gte
  - sce-cfg
- resets: Should contain an entry for each entry in reset-names.
  See ../reset/reset.txt for details.
- #address-cells: Number of address cells in each subnode (ivc-channels).
  Must be set to <1>.
- #size-cells: Number of size cells in each subnode (ivc-channels).
  Must be set to <1>.

== SCE sub nodes ==

* ast

Tegra AST unit converts any auxiliary CPUs' local AXI PA space
(not the CCPLEX PA space) to either physical or virtual MC
address space, i.e. its local slave address to either PA or
if SMMU enabled then to IOVA.

Required property:

- reg: base address and length of the AST aperture
  * Two apertures are required for SCE, so there should be two
    <address, length> pairs.

* ivc-channels

Contains a sub-node for each IVC channel implemented by the SCE.
For IVC channel details, please refer: ./tegra-ivc-channel.txt

* hsp

Describes the hardware synchronization primitive(s) used between CCPLEX
and SCE to signal incoming IVC messages or IVC write room.

Required property:
- compatible: Should match with the device driver implementing the
    cross-processor synchronization primitive.

If the HSP doorbell is used for IVC notifications:

- compatible: "nvidia,tegra186-hsp-doorbell"

- nvidia,hsp-doorbell: <HSP-phandle HSP-ID HSP-DB>
  * HSP is a set of HW synchronization primitives used in Tegra to allow
    multiple processors to share resources and communicate together.
  * HSP-ID is NVIDIA Tegra HSP unique source ID for SCE, used in IPC.
  * HSP-DB is NVIDIA Tegra HSP unique doorbell number allotted to SCE.
    A HSP doorbell allows a set of source agents in Tegra to request the
    attention of specified target agent. In general the agents are processors
    and doorbell used as part of an IPC protocol.
  * For more HSP details, refer: ./tegra-hsp.txt.

If the HSP shared mailbox is used for IVC notifications:

- nvidia,hsp-shared-mailbox: <HSP-phandle MBOX-NUMBER HSP-phandle MBOX-NUMBER...>
  * HSP is a set of HW synchronization primitives used in Tegra to allow
    multiple processors to share resources and communicate together.
  * MBOX-NUMBER is number of shared mailbox pair
  * For more HSP details, refer: ../tegra-hsp.txt.

- nvidia,hsp-shared-mailbox-names:
  Must include following entry:
  - ivc-pair

If the HSP shared mailbox is used for boot synchronization:

- nvidia,hsp-shared-mailbox: <HSP-phandle MBOX-NUMBER...>
- nvidia,hsp-shared-mailbox-names:
  Must include following entry:
  - cmd-pair

== Possible example ==

tegra_sce: rtcpu@b000000 {
	compatible = "nvidia,tegra186-sce-ivc";
	reg =	<0 0xb000000 0 0x1000>,	  /* SCE EVP (SCE_ATCM_EVP) */
		<0 0xb1f0000 0 0x40000>,  /* SCE PM */
		<0 0xb230000 0 0x10000>;  /* APS_FRSC (SCE_CFG) */
	clocks = <&tegra_car TEGRA186_CLK_SCE_APB>;
	clock-names = "sce-apb";
	resets =
		<&tegra_car TEGRA186_RESET_SCE_APB>,
		<&tegra_car TEGRA186_RESET_SCE_NSYSPORESET>,
		<&tegra_car TEGRA186_RESET_SCE_NRESET>,
		<&tegra_car TEGRA186_RESET_SCE_DBGRESETN>,
		<&tegra_car TEGRA186_RESET_SCE_PRESETDBGN>,
		<&tegra_car TEGRA186_RESET_SCE_ACTMON>,
		<&tegra_car TEGRA186_RESET_SCE_PM>,
		<&tegra_car TEGRA186_RESET_SCE_DMA>,
		<&tegra_car TEGRA186_RESET_SCE_HSP>,
		<&tegra_car TEGRA186_RESET_TSCTNSCE>,
		<&tegra_car TEGRA186_RESET_SCE_TKE>,
		<&tegra_car TEGRA186_RESET_SCE_GTE>,
		<&tegra_car TEGRA186_RESET_SCE_CFG>;
	reset-names =
		"sce-apb",
		"sce-nsysporeset",
		"sce-nreset",
		"sce-dbgresetn",
		"sce-presetdbgn",
		"sce-actmon",
		"sce-pm",
		"sce-dma",
		"sce-hsp",
		"tsctnsce",
		"sce-tke",
		"sce-gte",
		"sce-cfg";
	nvidia,ast = <&sce_ast0>, <&sce_ast1>;
	#address-cells = <1>;
	#size-cells = <1>;
	ranges;

	ast {
		reg = <0x0b040000 0x10000>, <0x0b050000 0x10000>;
	};
	ivc-channels@90000000 {
		#address-cells = <1>;
		#size-cells = <0>;
		reg = <0x90000000 0x10000>;
		ivc-channel@0 {
			compatible = "nvidia,tegra186-camera-ivc-protocol-echo";
			reg = <0x0000>, <0x8000>;
			reg-names = "rx", "tx";
			nvidia,frame-size = <64>;
			nvidia,frame-count = <16>;
		};
	};
	hsp {
		compatible = "nvidia,tegra186-hsp-mailbox";
		nvidia,hsp-shared-mailbox = <&sce_hsp 1 &sce_hsp 7>;
		nvidia,hsp-shared-mailbox-names = "ivc-pair", "cmd-pair";
	};
};
